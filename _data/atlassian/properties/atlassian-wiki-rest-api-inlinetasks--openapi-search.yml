openapi: 3.0.1
info:
  title: ' wiki/rest/api/inlinetasks/'
  description: Needs description.
  termsOfService: https://atlassian.com/terms/
  version: 1.0.0
externalDocs:
  description: The online and complete version of the Confluence Cloud REST API docs.
  url: https://developer.atlassian.com/cloud/confluence/rest/
servers:
  - url: //your-domain.atlassian.net
tags: []
paths:
  /wiki/rest/api/inlinetasks/search:
    get:
      tags:
        - Based
        - Inline
        - Inline Tasks
        - Parameters
        - REST
        - Search
        - Tasks
        - Wiki
      summary: 'Get Inline Tasks Based On Search Parameters '
      deprecated: true
      description: >-
        Deprecated, use [Confluence's v2
        API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).


        Returns inline tasks based on the search query.


        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:

        Permission to access the Confluence site ('Can use' global permission).
        Only tasks

        in contents that the user has permission to view are returned.
      operationId: searchTasks
      parameters:
        - name: start
          in: query
          description: The starting offset for the results.
          schema:
            type: integer
            format: int32
            default: 0
        - name: limit
          in: query
          description: The number of results to be returned.
          schema:
            type: integer
            format: int32
            default: 20
        - name: spaceKey
          in: query
          description: The space key of a space. Multiple space keys can be specified.
          schema:
            type: string
            default: null
        - name: pageId
          in: query
          description: The page id of a page. Multiple page ids can be specified.
          schema:
            type: string
            default: null
        - name: assignee
          in: query
          description: >-
            Account ID of a user to whom a task is assigned. Multiple users can
            be specified.
          schema:
            type: string
            default: null
        - name: creator
          in: query
          description: >-
            Account ID of a user to who created a task. Multiple users can be
            specified.
          schema:
            type: string
            default: null
        - name: completedUser
          in: query
          description: >-
            Account ID of a user who completed a task. Multiple users can be
            specified.
          schema:
            type: string
            default: null
        - name: duedateFrom
          in: query
          description: Start of date range based on due dates (inclusive).
          schema:
            type: integer
            format: int64
        - name: duedateTo
          in: query
          description: End of date range based on due dates (inclusive).
          schema:
            type: integer
            format: int64
        - name: createdateFrom
          in: query
          description: Start of date range based on create dates (inclusive).
          schema:
            type: integer
            format: int64
        - name: createdateTo
          in: query
          description: End of date range based on create dates (inclusive).
          schema:
            type: integer
            format: int64
        - name: completedateFrom
          in: query
          description: Start of date range based on complete dates (inclusive).
          schema:
            type: integer
            format: int64
        - name: completedateTo
          in: query
          description: End of date range based on complete dates (inclusive).
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          description: The status of the task. (checked/unchecked)
          schema:
            type: string
            default: null
            enum:
              - complete
              - incomplete
      responses:
        '200':
          description: Returned if the query fetches zero or more results.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskPageResponse'
        '403':
          description: |-
            Returned if the calling user does not have permission to view
            any content.
          content: {}
      security:
        - basicAuth: []
        - oAuthDefinitions:
            - read:confluence-content.all
      x-atlassian-oauth2-scopes:
        - scheme: oAuthDefinitions
          state: Current
          scopes:
            - read:confluence-content.all
        - scheme: oAuthDefinitions
          state: Beta
          scopes:
            - read:inlinetask:confluence
      x-atlassian-data-security-policy:
        - app-access-rule-exempt: false
      x-atlassian-connect-scope: READ
  /wiki/rest/api/inlinetasks/{inlineTaskId}:
    get:
      tags:
        - Based
        - Global
        - ID
        - Inline
        - Inline Tasks
        - REST
        - Tasks
        - Wiki
      summary: 'Get Inline Task Based On Global ID '
      deprecated: true
      description: >-
        Deprecated, use [Confluence's v2
        API](https://developer.atlassian.com/cloud/confluence/rest/v2/intro/).


        Returns inline task based on the global ID.


        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:

        Permission to view the content associated with the task.
      operationId: getTaskById
      parameters:
        - name: inlineTaskId
          in: path
          description: Global ID of the inline task
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returned if the inline task was found given the global ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: >-
            Returned if the authentication credentials are incorrect or missing
            from the request.
        '403':
          description: >-
            Returned if the user does not have permission to view the content
            associated with the task.
        '404':
          description: Returned if task could not be found with the given global ID.
      security:
        - basicAuth: []
        - oAuthDefinitions:
            - read:inlinetask:confluence
      x-atlassian-oauth2-scopes:
        - scheme: oAuthDefinitions
          state: Current
          scopes:
            - read:inlinetask:confluence
      x-atlassian-data-security-policy:
        - app-access-rule-exempt: false
      x-atlassian-connect-scope: READ
    put:
      tags:
        - Given
        - Global
        - ID
        - Inline
        - Inline Tasks
        - REST
        - Tasks
        - Wiki
      summary: 'Update Inline Task Given Global ID '
      deprecated: true
      description: |-
        Updates an inline tasks status given its global ID

        **[Permissions](https://confluence.atlassian.com/x/_AozKw) required**:
        Permission to update the content associated with the task.
      operationId: updateTaskById
      parameters:
        - name: inlineTaskId
          in: path
          description: Global ID of the inline task to update
          required: true
          schema:
            type: string
      requestBody:
        description: The updated task status.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskStatusUpdate'
        required: true
      responses:
        '200':
          description: Returned if the inline task was successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Returned if client input is invalid.
        '401':
          description: >-
            Returned if the authentication credentials are incorrect or missing
            from the request.
        '403':
          description: >-
            Returned if the user does not have permission to update the content
            associated with the task.
        '404':
          description: Returned if task could not be found with given global ID.
      security:
        - basicAuth: []
        - oAuthDefinitions:
            - read:inlinetask:confluence
            - write:inlinetask:confluence
      x-atlassian-oauth2-scopes:
        - scheme: oAuthDefinitions
          state: Current
          scopes:
            - read:inlinetask:confluence
            - write:inlinetask:confluence
      x-atlassian-data-security-policy:
        - app-access-rule-exempt: false
      x-atlassian-connect-scope: WRITE
components:
  schemas:
    TaskPageResponse:
      required:
        - limit
        - results
        - size
        - start
      type: object
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        start:
          type: integer
          format: int32
        limit:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
    Task:
      required:
        - contentId
        - createDate
        - creator
        - globalId
        - id
        - status
      type: object
      properties:
        globalId:
          type: integer
          format: int64
        id:
          type: integer
          format: int64
        contentId:
          type: integer
          format: int64
        status:
          type: string
        title:
          type: string
        description:
          type: string
        body:
          type: string
        creator:
          type: string
        assignee:
          type: string
        completeUser:
          type: string
        createDate:
          type: integer
          format: int64
        dueDate:
          type: integer
          format: int64
        updateDate:
          type: integer
          format: int64
        completeDate:
          type: integer
          format: int64
        _links:
          $ref: '#/components/schemas/GenericLinks'
x-atlassian-narrative:
  documents:
    - title: About
      anchor: about
      body: >-
        This is the reference for the Confluence Cloud REST API. This API is the
        primary way to get and

        modify data in Confluence Cloud, whether you are developing an app or
        any other integration.

        Use it to interact with Confluence entities, like pages and blog posts,
        spaces, users, groups,

        and more.
    - title: Authentication and authorization
      anchor: auth
      body: >-
        **Authentication:** If you are building a Cloud app, authentication is
        implemented via JWT or OAuth 2.0, depending on what you are building
        (see [Security
        overview](https://developer.atlassian.com/cloud/confluence/security-overview/)).
        Otherwise, if you are authenticating directly against the REST API, the
        REST API supports basic auth (see [Basic auth for REST
        APIs](https://developer.atlassian.com/cloud/confluence/basic-auth-for-rest-apis/)).


        **Authorization:** If you are building a Cloud app, authorization can be
        implemented by
        [scopes](https://developer.atlassian.com/cloud/confluence/scopes/) or by
        [OAuth 2.0 user
        impersonation](https://developer.atlassian.com/cloud/confluence/oauth-2-jwt-bearer-tokens-for-apps).
        Otherwise, if you are making calls directly against the REST API,
        authorization is based on the user used in the authentication process.


        See [Security
        overview](https://developer.atlassian.com/cloud/confluence/security-overview/)
        for more details on authentication and authorization.
    - title: Status codes
      anchor: status-code
      body: >-
        The Confluence REST API uses the [standard HTTP status
        codes](https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).


        Responses that return an error status code will also return a response
        body, similar to the following:

        ```json

        {
          "statusCode": 404,
          "data": {
            "authorized": false,
            "valid": false,
            "errors": [
              {
                "message": {
                  "translation": "This is an example error message.",
                  "args": []
                }
              }
            ],
            "successful": false
          },
          "message": "This is an example error message."
        }

        ```
    - title: Using the REST API
      anchor: using
      body: >-
        **Expansion:** The Confluence REST API uses resource expansion: some
        parts of a resource are not returned unless explicitly specified. This
        simplifies responses and minimizes network traffic.


        To expand part of a resource in a request, use the `expand` query
        parameter and specify the entities to be expanded. If you need to expand
        nested entities, use the `.` dot notation. For example, the following
        request will expand information about the requested content's space and
        labels:

        ```

        GET /wiki/rest/api/content/{id}?expand=space,metadata.labels

        ```

        **Pagination:** The Confluence REST API uses pagination: a method that
        returns a response with multiple objects can only return a limited
        number at one time. This limits the size of responses and conserves
        server resources.


        Use the 'limit' and 'start' query parameters to specify pagination:


        - `limit` is the number of objects to return per page. This may be
        restricted by system limits.

        - `start` is the index of the first item returned in the page of
        results. The base index is 0.


        For example, the following request will return ten content objects,
        starting from the fifth object.

        ```

        GET /wiki/rest/api/content?start=4&limit=10

        ```

        **Special headers:**


        - `X-Atlassian-Token: no-check` request header must be specified for
        methods

        that are protected from Cross Site Request Forgery (XSRF/CSRF) attacks.
        This is

        stated in the method description, if required. For more information, see
        this

        [KB
        article](https://confluence.atlassian.com/cloudkb/xsrf-check-failed-when-calling-cloud-apis-826874382.html).
    - title: Capabilities
      anchor: capabilities
      body: >-
        **Webhooks:** A webhook is a user-defined callback over HTTP. You can
        use Confluence webhooks to notify your app or web application when
        certain events occur in Confluence. For example, when a page is created
        or updated. To learn more, see
        [Webhooks](https://developer.atlassian.com/cloud/confluence/modules/webhook/).


        **Content properties:** Content properties are a key-value storage
        associated with a piece of Confluence content. If you are building an
        app, this is one form of persistence that you can use. You can use the
        Confluence REST API to get, update, and delete content properties. To
        learn more, see [Content properties in the REST
        API](https://developer.atlassian.com/cloud/confluence/content-properties/).


        **CQL:** The Confluence Query Language (CQL) allows you to perform
        complex searches for content using an SQL-like syntax in the `search`
        resource. To learn more, see [Advanced searching using
        CQL](https://developer.atlassian.com/cloud/confluence/advanced-searching-using-cql/).
