components:
  schemas:
    Version:
      additionalProperties: false
      description: Details about a project version.
      properties:
        approvers:
          description: >-
            If the expand option `approvers` is used, returns a list containing
            the approvers for this version.
          items:
            $ref: '#/components/schemas/VersionApprover'
          readOnly: true
          type: array
        archived:
          description: >-
            Indicates that the version is archived. Optional when creating or
            updating a version.
          type: boolean
        description:
          description: >-
            The description of the version. Optional when creating or updating a
            version. The maximum size is 16,384 bytes.
          type: string
        driver:
          description: >-
            If the expand option `driver` is used, returns the Atlassian account
            ID of the driver.
          readOnly: true
          type: string
        expand:
          description: >-
            Use [expand](em>#expansion) to include additional information about
            version in the response. This parameter accepts a comma-separated
            list. Expand options include:

             *  `operations` Returns the list of operations available for this version.
             *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.
             *  `driver` Returns the Atlassian account ID of the version driver.
             *  `approvers` Returns a list containing approvers for this version.

            Optional for create and update.
          type: string
          xml:
            attribute: true
        id:
          description: The ID of the version.
          readOnly: true
          type: string
        issuesStatusForFixVersion:
          allOf:
            - $ref: '#/components/schemas/VersionIssuesStatus'
          description: >-
            If the expand option `issuesstatus` is used, returns the count of
            issues in this version for each of the status categories *to do*,
            *in progress*, *done*, and *unmapped*. The *unmapped* property
            contains a count of issues with a status other than *to do*, *in
            progress*, and *done*.
          readOnly: true
        moveUnfixedIssuesTo:
          description: >-
            The URL of the self link to the version to which all unfixed issues
            are moved when a version is released. Not applicable when creating a
            version. Optional when updating a version.
          format: uri
          type: string
        name:
          description: >-
            The unique name of the version. Required when creating a version.
            Optional when updating a version. The maximum length is 255
            characters.
          type: string
        operations:
          description: >-
            If the expand option `operations` is used, returns the list of
            operations available for this version.
          items:
            $ref: '#/components/schemas/SimpleLink'
          readOnly: true
          type: array
        overdue:
          description: Indicates that the version is overdue.
          readOnly: true
          type: boolean
        project:
          description: Deprecated. Use `projectId`.
          type: string
        projectId:
          description: >-
            The ID of the project to which this version is attached. Required
            when creating a version. Not applicable when updating a version.
          format: int64
          type: integer
        releaseDate:
          description: >-
            The release date of the version. Expressed in ISO 8601 format
            (yyyy-mm-dd). Optional when creating or updating a version.
          format: date
          type: string
        released:
          description: >-
            Indicates that the version is released. If the version is released a
            request to release again is ignored. Not applicable when creating a
            version. Optional when updating a version.
          type: boolean
        self:
          description: The URL of the version.
          format: uri
          readOnly: true
          type: string
        startDate:
          description: >-
            The start date of the version. Expressed in ISO 8601 format
            (yyyy-mm-dd). Optional when creating or updating a version.
          format: date
          type: string
        userReleaseDate:
          description: >-
            The date on which work on this version is expected to finish,
            expressed in the instance's *Day/Month/Year Format* date format.
          readOnly: true
          type: string
        userStartDate:
          description: >-
            The date on which work on this version is expected to start,
            expressed in the instance's *Day/Month/Year Format* date format.
          readOnly: true
          type: string
      type: object
      xml:
        name: version
    VersionIssueCounts:
      additionalProperties: false
      description: Various counts of issues within a version.
      properties:
        customFieldUsage:
          description: List of custom fields using the version.
          items:
            $ref: '#/components/schemas/VersionUsageInCustomField'
          readOnly: true
          type: array
        issueCountWithCustomFieldsShowingVersion:
          description: Count of issues where a version custom field is set to the version.
          format: int64
          readOnly: true
          type: integer
        issuesAffectedCount:
          description: Count of issues where the `affectedVersion` is set to the version.
          format: int64
          readOnly: true
          type: integer
        issuesFixedCount:
          description: Count of issues where the `fixVersion` is set to the version.
          format: int64
          readOnly: true
          type: integer
        self:
          description: The URL of these count details.
          format: uri
          readOnly: true
          type: string
      type: object
      xml:
        name: version
    VersionRelatedWork:
      additionalProperties: false
      description: Associated related work to a version
      properties:
        category:
          description: The category of the related work
          readOnly: true
          type: string
        issueId:
          description: The title of the related work
          format: int64
          readOnly: true
          type: integer
        relatedWorkId:
          description: >-
            The id of the related work. For the native release note related work
            item, this will be null, and Rest API does not support updating it.
          readOnly: true
          type: string
        title:
          description: The title of the related work
          readOnly: true
          type: string
        url:
          description: The URL of the related work
          format: uri
          readOnly: true
          type: string
      required:
        - category
      type: object
    VersionUnresolvedIssuesCount:
      additionalProperties: false
      description: Count of a version's unresolved issues.
      properties:
        issuesCount:
          description: Count of issues.
          format: int64
          readOnly: true
          type: integer
        issuesUnresolvedCount:
          description: Count of unresolved issues.
          format: int64
          readOnly: true
          type: integer
        self:
          description: The URL of these count details.
          format: uri
          readOnly: true
          type: string
      type: object
      xml:
        name: version
externalDocs:
  description: Find out more about Atlassian products and services.
  url: http://www.atlassian.com
info:
  contact:
    email: ecosystem@atlassian.com
  description: Needs description.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://atlassian.com/terms/
  title: ' rest/api/3/version/'
  version: 1001.0.0-SNAPSHOT-67b5c6e5f3598d7ec1649016d026468ab2838a77
openapi: 3.0.1
paths:
  /rest/api/3/version/{id}:
    delete:
      deprecated: true
      description: >-
        Deletes a project version.


        Deprecated, use [ Delete and replace
        version](#api-rest-api-3-version-id-removeAndSwap-post) that supports
        swapping version values in custom fields, in addition to the swapping
        for `fixVersion` and `affectedVersion` provided in this resource.


        Alternative versions can be provided to update issues that use the
        deleted version in `fixVersion` or `affectedVersion`. If alternatives
        are not provided, occurrences of `fixVersion` and `affectedVersion` that
        contain the deleted version are cleared.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer Jira* [global
        permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer
        Projects* [project
        permission](https://confluence.atlassian.com/x/yodKLg) for the project
        that contains the version.
      operationId: deleteVersion
      parameters:
        - description: The ID of the version.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: >-
            The ID of the version to update `fixVersion` to when the field
            contains the deleted version. The replacement version must be in the
            same project as the version being deleted and cannot be the version
            being deleted.
          in: query
          name: moveFixIssuesTo
          schema:
            type: string
        - description: >-
            The ID of the version to update `affectedVersion` to when the field
            contains the deleted version. The replacement version must be in the
            same project as the version being deleted and cannot be the version
            being deleted.
          in: query
          name: moveAffectedIssuesTo
          schema:
            type: string
      responses:
        '204':
          description: Returned if the version is deleted.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: |-
            Returned if:

             *  the authentication credentials are incorrect.
             *  the user does not have the required permissions.
        '404':
          description: Returned if the version is not found.
      security:
        - basicAuth: []
        - OAuth2:
            - manage:jira-project
        - {}
      summary: 'Delete Version '
      tags:
        - REST
        - Versions
      x-atlassian-data-security-policy:
        - app-access-rule-exempt: false
      x-atlassian-oauth2-scopes:
        - scheme: OAuth2
          scopes:
            - manage:jira-project
          state: Current
        - scheme: OAuth2
          scopes:
            - delete:project-version:jira
          state: Beta
      x-atlassian-connect-scope: PROJECT_ADMIN
    get:
      deprecated: false
      description: >-
        Returns a project version.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse projects* [project
        permission](https://confluence.atlassian.com/x/yodKLg) for the project
        containing the version.
      operationId: getVersion
      parameters:
        - description: The ID of the version.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: >-
            Use [expand](#expansion) to include additional information about
            version in the response. This parameter accepts a comma-separated
            list. Expand options include:

             *  `operations` Returns the list of operations available for this version.
             *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property represents the number of issues with a status other than *to do*, *in progress*, and *done*.
             *  `driver` Returns the Atlassian account ID of the version driver.
             *  `approvers` Returns a list containing the Atlassian account IDs of approvers for this version.
          in: query
          name: expand
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              example: >-
                {"archived":false,"description":"An excellent
                version","id":"10000","name":"New Version
                1","overdue":true,"projectId":10000,"releaseDate":"2010-07-06","released":true,"self":"https://your-domain.atlassian.net/rest/api/3/version/10000","userReleaseDate":"6/Jul/2010"}
              schema:
                $ref: '#/components/schemas/Version'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '404':
          description: >-
            Returned if the version is not found or the user does not have the
            necessary permission.
      security:
        - basicAuth: []
        - OAuth2:
            - read:jira-work
        - {}
      summary: 'Get Version '
      tags:
        - REST
        - Versions
      x-atlassian-data-security-policy:
        - app-access-rule-exempt: false
      x-atlassian-oauth2-scopes:
        - scheme: OAuth2
          scopes:
            - read:jira-work
          state: Current
        - scheme: OAuth2
          scopes:
            - read:project-version:jira
          state: Beta
      x-atlassian-connect-scope: READ
    put:
      deprecated: false
      description: >-
        Updates a project version.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer Jira* [global
        permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer
        Projects* [project
        permission](https://confluence.atlassian.com/x/yodKLg) for the project
        that contains the version.
      operationId: updateVersion
      parameters:
        - description: The ID of the version.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            example:
              archived: false
              description: An excellent version
              id: '10000'
              name: New Version 1
              overdue: true
              projectId: 10000
              releaseDate: '2010-07-06'
              released: true
              self: https://your-domain.atlassian.net/rest/api/~ver~/version/10000
              userReleaseDate: 6/Jul/2010
            schema:
              $ref: '#/components/schemas/Version'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: >-
                {"archived":false,"description":"An excellent
                version","id":"10000","name":"New Version
                1","project":"PXA","projectId":10000,"releaseDate":"2010-07-06","released":true,"self":"https://your-domain.atlassian.net/rest/api/3/version/10000","userReleaseDate":"6/Jul/2010"}
              schema:
                $ref: '#/components/schemas/Version'
          description: Returned if the request is successful.
        '400':
          description: |-
            Returned if:

             *  the request is invalid.
             *  the user does not have the required permissions.
        '401':
          description: Returned if the authentication credentials are incorrect.
        '404':
          description: Returned if the version is not found.
      security:
        - basicAuth: []
        - OAuth2:
            - manage:jira-project
        - {}
      summary: 'Update Version '
      tags:
        - REST
        - Versions
      x-atlassian-data-security-policy:
        - app-access-rule-exempt: false
      x-atlassian-oauth2-scopes:
        - scheme: OAuth2
          scopes:
            - manage:jira-project
          state: Current
        - scheme: OAuth2
          scopes:
            - write:project-version:jira
            - read:project-version:jira
          state: Beta
      x-atlassian-connect-scope: PROJECT_ADMIN
  /rest/api/3/version/{id}/mergeto/{moveIssuesTo}:
    put:
      deprecated: false
      description: >-
        Merges two project versions. The merge is completed by deleting the
        version specified in `id` and replacing any occurrences of its ID in
        `fixVersion` with the version ID specified in `moveIssuesTo`.


        Consider using [ Delete and replace
        version](#api-rest-api-3-version-id-removeAndSwap-post) instead. This
        resource supports swapping version values in `fixVersion`,
        `affectedVersion`, and custom fields.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer Jira* [global
        permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer
        Projects* [project
        permission](https://confluence.atlassian.com/x/yodKLg) for the project
        that contains the version.
      operationId: mergeVersions
      parameters:
        - description: The ID of the version to delete.
          in: path
          name: id
          required: true
          schema:
            type: string
        - description: The ID of the version to merge into.
          in: path
          name: moveIssuesTo
          required: true
          schema:
            type: string
      responses:
        '204':
          content:
            application/json:
              schema: {}
          description: Returned if the version is deleted.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: |-
            Returned if:

             *  the authentication credentials are incorrect or missing.
             *  the user does not have the required permissions.
        '404':
          description: >-
            Returned if the version to be deleted or the version to merge to are
            not found.
      security:
        - basicAuth: []
        - OAuth2:
            - manage:jira-project
        - {}
      summary: 'Merge Versions '
      tags:
        - Issues
        - Merge
        - Mergeto
        - Move
        - REST
        - Versions
      x-atlassian-data-security-policy:
        - app-access-rule-exempt: false
      x-atlassian-oauth2-scopes:
        - scheme: OAuth2
          scopes:
            - manage:jira-project
          state: Current
        - scheme: OAuth2
          scopes:
            - delete:project-version:jira
            - write:project-version:jira
          state: Beta
      x-atlassian-connect-scope: PROJECT_ADMIN
  /rest/api/3/version/{id}/move:
    post:
      deprecated: false
      description: >-
        Modifies the version's sequence within the project, which affects the
        display order of the versions in Jira.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse projects* project
        permission for the project that contains the version.
      operationId: moveVersion
      parameters:
        - description: The ID of the version to be moved.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            example:
              after: https://your-domain.atlassian.net/rest/api/~ver~/version/10000
            schema:
              $ref: '#/components/schemas/VersionMoveBean'
        required: true
      responses:
        '200':
          content:
            application/json:
              example: >-
                {"archived":false,"description":"An excellent
                version","id":"10000","name":"New Version
                1","overdue":true,"projectId":10000,"releaseDate":"2010-07-06","released":true,"self":"https://your-domain.atlassian.net/rest/api/3/version/10000","userReleaseDate":"6/Jul/2010"}
              schema:
                $ref: '#/components/schemas/Version'
          description: Returned if the request is successful.
        '400':
          description: |-
            Returned if:

             *  no body parameters are provided.
             *  `after` and `position` are provided.
             *  `position` is invalid.
        '401':
          description: |-
            Returned if:

             *  the authentication credentials are incorrect or missing
             *  the user does not have the required commissions.
        '404':
          description: Returned if the version or move after version are not found.
      security:
        - basicAuth: []
        - OAuth2:
            - manage:jira-project
        - {}
      summary: 'Move Version '
      tags:
        - Move
        - REST
        - Versions
      x-atlassian-data-security-policy:
        - app-access-rule-exempt: true
      x-atlassian-oauth2-scopes:
        - scheme: OAuth2
          scopes:
            - manage:jira-project
          state: Current
        - scheme: OAuth2
          scopes:
            - write:project-version:jira
            - read:project-version:jira
          state: Beta
      x-atlassian-connect-scope: PROJECT_ADMIN
  /rest/api/3/version/{id}/relatedIssueCounts:
    get:
      deprecated: false
      description: >-
        Returns the following counts for a version:

         *  Number of issues where the `fixVersion` is set to the version.
         *  Number of issues where the `affectedVersion` is set to the version.
         *  Number of issues where a version custom field is set to the version.

        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse projects* project
        permission for the project that contains the version.
      operationId: getVersionRelatedIssues
      parameters:
        - description: The ID of the version.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              example: >-
                {"customFieldUsage":[{"customFieldId":10000,"fieldName":"Field1","issueCountWithVersionInCustomField":2},{"customFieldId":10010,"fieldName":"Field2","issueCountWithVersionInCustomField":3}],"issueCountWithCustomFieldsShowingVersion":54,"issuesAffectedCount":101,"issuesFixedCount":23,"self":"https://your-domain.atlassian.net/rest/api/3/version/10000"}
              schema:
                $ref: '#/components/schemas/VersionIssueCounts'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect.
        '404':
          description: |-
            Returned if:

             *  the version is not found.
             *  the user does not have the required permissions.
      security:
        - basicAuth: []
        - OAuth2:
            - read:jira-work
        - {}
      summary: 'Get Version''s Related Issues Count '
      tags:
        - Count
        - Counts
        - Issues
        - REST
        - Related
        - Version's
        - Versions
      x-atlassian-data-security-policy:
        - app-access-rule-exempt: true
      x-atlassian-oauth2-scopes:
        - scheme: OAuth2
          scopes:
            - read:jira-work
          state: Current
        - scheme: OAuth2
          scopes:
            - read:field:jira
            - read:project-version:jira
          state: Beta
      x-atlassian-connect-scope: READ
  /rest/api/3/version/{id}/relatedwork:
    get:
      deprecated: false
      description: >-
        Returns related work items for the given version id.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse projects* [project
        permission](https://confluence.atlassian.com/x/yodKLg) for the project
        containing the version.
      operationId: getRelatedWork
      parameters:
        - description: The ID of the version.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              example: >-
                [{"category":"Design","issueId":10001,"relatedWorkId":"fabcdef6-7878-1234-beaf-43211234abcd","title":"Design
                link","url":"https://www.atlassian.com"},{"category":"Communications","issueId":10002,"relatedWorkId":"fabcdef6-7878-1234-beaf-43211234abce","title":"Chat
                application","url":"https://www.atlassian.com"},{"category":"External
                Link","issueId":10003,"relatedWorkId":"fabcdef6-7878-1234-beaf-43211234abcf","title":"Some
                website","url":"https://www.atlassian.com"}]
              schema:
                items:
                  $ref: '#/components/schemas/VersionRelatedWork'
                type: array
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '404':
          description: >-
            Returned if the version is not found or the user does not have the
            necessary permission.
        '500':
          description: Returned if reading related work fails
      security:
        - basicAuth: []
        - OAuth2:
            - read:jira-work
        - {}
      summary: 'Get Related Work '
      tags:
        - REST
        - Related
        - Related Work
        - Versions
        - Work
      x-atlassian-data-security-policy:
        - app-access-rule-exempt: true
      x-atlassian-oauth2-scopes:
        - scheme: OAuth2
          scopes:
            - read:jira-work
          state: Current
        - scheme: OAuth2
          scopes:
            - read:project-version:jira
          state: Beta
      x-atlassian-connect-scope: READ
    post:
      deprecated: false
      description: >-
        Creates a related work for the given version. You can only create a
        generic link type of related works via this API. relatedWorkId will be
        auto-generated UUID, that does not need to be provided.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Resolve issues:* and *Edit
        issues* [Managing project
        permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html)
        for the project that contains the version.
      operationId: createRelatedWork
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VersionRelatedWork'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionRelatedWork'
          description: Returned if the request is successful.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '403':
          description: Returned if the user does not have the required permissions.
        '404':
          description: Returned if the version is not found.
      security:
        - basicAuth: []
        - OAuth2:
            - write:jira-work
        - {}
      summary: 'Create Related Work '
      tags:
        - REST
        - Related
        - Related Work
        - Versions
        - Work
      x-atlassian-data-security-policy:
        - app-access-rule-exempt: true
      x-atlassian-oauth2-scopes:
        - scheme: OAuth2
          scopes:
            - write:jira-work
          state: Current
        - scheme: OAuth2
          scopes:
            - write:issue:jira
          state: Beta
      x-atlassian-connect-scope: PROJECT_ADMIN
    put:
      deprecated: false
      description: >-
        Updates the given related work. You can only update generic link related
        works via Rest APIs. Any archived version related works can't be edited.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Resolve issues:* and *Edit
        issues* [Managing project
        permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html)
        for the project that contains the version.
      operationId: updateRelatedWork
      parameters:
        - description: >-
            The ID of the version to update the related work on. For the related
            work id, pass it to the input JSON.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VersionRelatedWork'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionRelatedWork'
          description: >-
            Returned if the request is successful together with updated related
            work.
        '400':
          description: Returned if the request data is invalid
        '401':
          description: Returned if the authentication credentials are incorrect.
        '403':
          description: Returned if the user does not have the required permissions.
        '404':
          description: Returned if the version or the related work is not found.
      security:
        - basicAuth: []
        - OAuth2:
            - write:jira-work
        - {}
      summary: 'Update Related Work '
      tags:
        - REST
        - Related
        - Related Work
        - Versions
        - Work
      x-atlassian-data-security-policy:
        - app-access-rule-exempt: true
      x-atlassian-oauth2-scopes:
        - scheme: OAuth2
          scopes:
            - write:jira-work
          state: Current
        - scheme: OAuth2
          scopes:
            - write:issue:jira
          state: Beta
      x-atlassian-connect-scope: PROJECT_ADMIN
  /rest/api/3/version/{id}/removeAndSwap:
    post:
      deprecated: false
      description: >-
        Deletes a project version.


        Alternative versions can be provided to update issues that use the
        deleted version in `fixVersion`, `affectedVersion`, or any version
        picker custom fields. If alternatives are not provided, occurrences of
        `fixVersion`, `affectedVersion`, and any version picker custom field,
        that contain the deleted version, are cleared. Any replacement version
        must be in the same project as the version being deleted and cannot be
        the version being deleted.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Administer Jira* [global
        permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer
        Projects* [project
        permission](https://confluence.atlassian.com/x/yodKLg) for the project
        that contains the version.
      operationId: deleteAndReplaceVersion
      parameters:
        - description: The ID of the version.
          in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteAndReplaceVersionBean'
        required: true
      responses:
        '204':
          content:
            application/json:
              schema: {}
          description: Returned if the version is deleted.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '404':
          description: |-
            Returned if:

             *  the version to delete is not found.
             *  the user does not have the required permissions.
      security:
        - basicAuth: []
        - OAuth2:
            - manage:jira-project
        - {}
      summary: 'Delete And Replace Version '
      tags:
        - REST
        - Removes
        - Replace
        - Swap
        - Versions
      x-atlassian-data-security-policy:
        - app-access-rule-exempt: false
      x-atlassian-oauth2-scopes:
        - scheme: OAuth2
          scopes:
            - manage:jira-project
          state: Current
        - scheme: OAuth2
          scopes:
            - delete:project-version:jira
            - write:project-version:jira
          state: Beta
      x-atlassian-connect-scope: PROJECT_ADMIN
  /rest/api/3/version/{id}/unresolvedIssueCount:
    get:
      deprecated: false
      description: >-
        Returns counts of the issues and unresolved issues for the project
        version.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Browse projects* project
        permission for the project that contains the version.
      operationId: getVersionUnresolvedIssues
      parameters:
        - description: The ID of the version.
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              example: >-
                {"issuesCount":30,"issuesUnresolvedCount":23,"self":"https://your-domain.atlassian.net/rest/api/3/version/10000"}
              schema:
                $ref: '#/components/schemas/VersionUnresolvedIssuesCount'
          description: Returned if the request is successful.
        '401':
          description: Returned if the authentication credentials are incorrect or missing.
        '404':
          description: |-
            Returned if:

             *  the version is not found.
             *  the user does not have the required permissions.
      security:
        - basicAuth: []
        - OAuth2:
            - read:jira-work
        - {}
      summary: 'Get Version''s Unresolved Issues Count '
      tags:
        - Count
        - Issues
        - REST
        - Unresolved
        - Version's
        - Versions
      x-atlassian-data-security-policy:
        - app-access-rule-exempt: false
      x-atlassian-oauth2-scopes:
        - scheme: OAuth2
          scopes:
            - read:jira-work
          state: Current
        - scheme: OAuth2
          scopes:
            - read:project-version:jira
          state: Beta
      x-atlassian-connect-scope: READ
  /rest/api/3/version/{versionId}/relatedwork/{relatedWorkId}:
    delete:
      deprecated: false
      description: >-
        Deletes the given related work for the given version.


        This operation can be accessed anonymously.


        **[Permissions](#permissions) required:** *Resolve issues:* and *Edit
        issues* [Managing project
        permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html)
        for the project that contains the version.
      operationId: deleteRelatedWork
      parameters:
        - description: The ID of the version that the target related work belongs to.
          in: path
          name: versionId
          required: true
          schema:
            type: string
        - description: The ID of the related work to delete.
          in: path
          name: relatedWorkId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Returned if the related work is deleted.
        '400':
          description: Returned if the request is invalid.
        '401':
          description: |-
            Returned if

            the authentication credentials are incorrect.
        '403':
          description: Returned if the user does not have the required permissions.
        '404':
          description: Returned if the version/related work is not found.
      security:
        - basicAuth: []
        - OAuth2:
            - write:jira-work
        - {}
      summary: 'Delete Related Work '
      tags:
        - REST
        - Related
        - Related Work
        - Versions
        - Work
      x-atlassian-data-security-policy:
        - app-access-rule-exempt: true
      x-atlassian-oauth2-scopes:
        - scheme: OAuth2
          scopes:
            - write:jira-work
          state: Current
        - scheme: OAuth2
          scopes:
            - write:issue:jira
          state: Beta
      x-atlassian-connect-scope: PROJECT_ADMIN
servers:
  - url: https://your-domain.atlassian.net
tags: []
x-atlassian-narrative:
  documents:
    - anchor: about
      body: >-
        The Jira REST API enables you to interact with Jira programmatically.
        Use this API to 

        [build
        apps](https://developer.atlassian.com/cloud/jira/platform/integrating-with-jira-cloud/),
        script interactions with 

        Jira, or develop any other type of integration. This page documents the
        REST resources available in Jira Cloud, including 

        the HTTP response codes and example requests and responses.
      title: About
    - anchor: version
      body: >
        This documentation is for **version 3** of the Jira Cloud platform REST
        API, which is the latest version

        but is in **beta**. [Version
        2](https://developer.atlassian.com/cloud/jira/platform/rest/v2/) and 

        version 3 of the API offer the same collection of operations. However,
        version 3 provides support for 

        the [Atlassian Document
        Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/) 

        (ADF) in: 

        - `body` in comments, including where comments are used in issue, issue
        link, and transition resources.

        - `comment` in worklogs.

        - `description` and `environment` fields in issues.

        - `textarea` type custom fields (multi-line text fields) in issues.
        Single line custom fields 
          (`textfield`) accept a string and don't handle Atlassian Document Format content.

        However, these new features are under development and may change.
      title: Version
    - anchor: authentication
      body: >
        ### Forge apps


        For Forge apps, [REST API
        scopes](https://developer.atlassian.com/cloud/jira/platform/scopes-for-oauth-2-3LO-and-forge-apps/) 

        are used when authenticating with Jira Cloud platform. See [Add scopes
        to call an Atlassian REST
        API](https://developer.atlassian.com/platform/forge/add-scopes-to-call-an-atlassian-rest-api/)
        for more details.


        The URIs for Forge app REST API calls have this structure:


        `/rest/api/3/<resource-name>`


        For example, `/rest/api/3/issue/DEMO-1`


        ### Connect apps


        For Connect apps, authentication (JWT-based) is built into the Connect
        libraries. Authorization is implemented using either 

        scopes (shown as _App scope required_ for operations on this page) or
        user impersonation. See 

        [Security for Connect
        apps](https://developer.atlassian.com/cloud/jira/platform/security-for-connect-apps/) 

        for details.


        The URIs for Connect app REST API calls have this structure:


        `https://<site-url>/rest/api/3/<resource-name>`


        For example, `https://your-domain.atlassian.net/rest/api/3/issue/DEMO-1`


        ### Other integrations


        For integrations that are not Forge or Connect apps, use OAuth 2.0
        authorization code grants (3LO) for security 

        (3LO scopes are shown as for operations _OAuth scopes required_). See 

        [OAuth 2.0 (3LO)
        apps](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps/) 

        for details.


        The URIs for OAuth 2.0 (3LO) app REST API calls have this structure:


        `https://api.atlassian.com/ex/jira/<cloudId>/rest/api/3/<resource-name>`


        For example,
        `https://api.atlassian.com/ex/jira/35273b54-3f06-40d2-880f-dd28cf8daafa/rest/api/3/issue/DEMO-1`


        ### Ad-hoc API calls


        For personal scripts, bots, and ad-hoc execution of the REST APIs use
        basic authentication. See [Basic auth for REST
        APIs](https://developer.atlassian.com/cloud/jira/platform/basic-auth-for-rest-apis/)
        for details. 


        The URIs for basic authentication REST API calls have this structure:


        `https://<site-url>/rest/api/3/<resource-name>`


        For example, `https://your-domain.atlassian.net/rest/api/3/issue/DEMO-1`
      title: Authentication and authorization
    - anchor: permissions
      body: >
        ### Operation permissions


        Most operations in this API require permissions. The calling user must
        have the required permissions for an operation to 

        use it. Note that for Connect apps, the app user must have the required
        permissions for the operation and the app must 

        have scopes that permit the operation.


        A permission can be granted to a group, project role, or issue role that
        the user is a member of, or granted directly to a user. 

        See [Permissions overview](https://confluence.atlassian.com/x/FQiiLQ)
        for details. The most common permissions are:


        - **Administer the Cloud site**: Users in the _site-admins_ group have
        this 

        permission. See [Manage
        groups](https://confluence.atlassian.com/x/24xjL) for details.

        - **Administer Jira**: Granted by the _Jira Administrators_ global
        permission. There is a default group for this permission. 

        See [Manage groups](https://confluence.atlassian.com/x/24xjL) and
        [Managing global permissions](https://confluence.atlassian.com/x/x4dKLg)
        for details.

        - **Administer a project in Jira**: Granted by the _Administer projects_
        project permission for a project. This can be 

        granted to a user, a group, a project role, and more. 

        See [Managing project
        permissions](https://confluence.atlassian.com/x/yodKLg) for details.

        - **Access a project in Jira**: Granted by the _Browse projects_ project
        permission for a project. This can be 

        granted to a user, a group, a project role, and more. 

        See [Managing project
        permissions](https://confluence.atlassian.com/x/yodKLg) for details.

        - **Access Jira**: Granted by the _Jira Users_ global permission. Users
        in the default product access group (for example, 

        _jira-software-users-acmesite_) have this permission. 

        See [Manage groups](https://confluence.atlassian.com/x/24xjL) and 

        [Managing global permissions](https://confluence.atlassian.com/x/x4dKLg)
        for details.


        ### Anonymous access


        Some operations provide support for anonymous access. However, anonymous
        access is only available if 

        the Jira permission needed to access the object or records returned by
        the operation is granted to 

        the _Public_ group. See [Allowing anonymous access to your
        project](https://confluence.atlassian.com/x/GDxxLg) 

        for details.


        If an operation is called anonymously and anonymous access is not
        available, the operation will return 

        an error. Note that not all operations that correspond to objects that
        can be given public access 

        provide for anonymous access.
      title: Permissions
    - anchor: expansion
      body: >+
        ### Expansion


        The Jira REST API uses resource expansion, which means that some parts
        of a resource are not returned unless specified 

        in the request. This simplifies responses and minimizes network traffic.


        To expand part of a resource in a request, use the expand query
        parameter and specify the object(s) to be expanded. 

        If you need to expand nested objects, use the `.` dot notation. If you
        need to expand multiple objects, use a 

        comma-separated list. 


        For example, the following request expands the `names` and
        `renderedFields` properties for the _JRACLOUD-34423_ issue:


        `GET issue/JRACLOUD-34423?expand=names,renderedFields`


        To discover which object can be expanded, refer to the `expand` property
        in the object. 

        In the JSON example below, the resource declares `widgets` as
        expandable.


        ```json

        {
          "expand": "widgets", 
          "self": "https://your-domain.atlassian.net/rest/api/3/resource/KEY-1", 
          "widgets": {
            "widgets": [],
            "size": 5
           }
        }

        ```


        ### Pagination


        The Jira REST API uses pagination to improve performance. Pagination is
        enforced for operations that could return a large 

        collection of items. When you make a request to a paginated resource,
        the response wraps the returned array of values in 

        a JSON object with paging metadata. For example:


        ```json

        {
            "startAt" : 0,
            "maxResults" : 10,
            "total": 200,
            "isLast": false,
            "values": [
                { /* result 0 */ },
                { /* result 1 */ },
                { /* result 2 */ }
            ]
        }

        ```


        *   `startAt` is the index of the first item returned in the page.

        *   `maxResults` is the maximum number of items that a page can return.
        Each operation can have a different limit for
            the number of items returned, and these limits may change without notice. To find the maximum number of items 
            that an operation could return, set `maxResults` to a large number—for example, over 1000—and if the returned value of `maxResults` is less than the requested value, the returned value is the maximum.
        *    `total` is the total number of items contained in all pages. This
        number **_may change_** as the client 

        requests the subsequent pages, therefore the client should always assume
        that the requested page can be empty. Note 

        that this property is not returned for all operations.

        *   `isLast` indicates whether the page returned is the last one. Note
        that this property is not returned for all operations.


        ### Ordering


        Some operations support ordering the elements of a response by a field.
        Check the documentation for the operation to 

        confirm whether ordering of a response is supported and which fields can
        be used. Responses are listed in ascending order 

        by default. You can change the order using the `orderby` query parameter
        with a `-` or `+` symbol. For example:


        *   `?orderBy=name` to order by `name` field ascending.

        *   `?orderBy=+name` to order by `name` field ascending.

        *   `?orderBy=-name` to order by `name` field descending.


      title: Expansion, pagination, and ordering
    - anchor: timestamps
      body: >
        By default, top-level timestamps (e.g. updated and created) are returned
        in [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format, in the system
        default user time zone.


        To return date time data in the logged in user's timezone, please refer
        to `renderedFields` property under the `expand` query parameter in
        relevant APIs.
      title: Timestamps
    - anchor: special-request-headers
      body: >-
        The following request and response headers define important metadata for
        the Jira Cloud REST API resources.


        -   `X-Atlassian-Token` (request): Operations that accept
        multipart/form-data must include the `X-Atlassian-Token: no-check`

        header in requests. Otherwise the request is blocked by cross-site
        request forgery (CSRF/XSRF) protection.

        -   `X-Force-Accept-Language` (request): controls how the standard HTTP
        `Accept-Language` header is processed.

        By default `Accept-Language` is ignored and the response is in the
        language configured in the user's profile or,

        when no language is configured for the user, the default Jira instance
        language. For the response to recognize

        `Accept-Language` send `X-Force-Accept-Language = true` as well. If
        `Accept-Language` requests a language that Jira

        can return the response is in that language, otherwise Jira returns the
        response in the default language. If

        `Accept-Language` is not specified the response is in the default
        language.

        -   `X-AAccountId` (response): This response header contains the
        Atlassian account ID of the authenticated user.
      title: Special headers
    - anchor: anonymous-operations
      body: |2-
         Jira provides for all permissions, except the [global permission](https://confluence.atlassian.com/x/x4dKLg) Administer Jira, to be assigned to *Anyone*. Once a permission is assigned to *Anyone*, anyone knowing a project's URL is able to use the features in Jira enabled by the permission. However, the Jira REST API does not enable anonymous access for operations by default. This means that an anonymous user who may be able to perform an action through Jira, may not be able to perform the same action where it's enabled by the REST API. 

         The operations that provide anonymous access are annotated "This operation can be accessed anonymously."
      title: Anonymous operations
    - anchor: async-operations
      body: >-
        Some Jira REST API operations may trigger long-running or
        computationally expensive tasks. In these cases, the operation 

        will schedule an asynchronous task and return a `303 (See Other)`
        response, indicating the location of the queued task 

        in the `Location` header. You can query this task to get progress
        updates.


        When the task finishes, the response object will contain the `result`
        field. The content of the field is specific to the 

        operation that created the task. Refer to the operation’s documentation
        for more information.


        Note that asynchronous tasks are not guaranteed to be run in order. In
        other words, if you need your tasks to execute 

        in a certain order, you should start a task only after the prerequisite
        task(s) have finished.
      title: Asynchronous operations
    - anchor: experimental
      body: >
        Features and methods marked as experimental may change without notice.
        Feedback on experimental functionality is welcome. 

        Report your suggestions and bugs in the [ACJIRA
        project](https://ecosystem.atlassian.net/projects/ACJIRA) (preferred) or
        use the 

        **Give docs feedback** link at the top of this page. 
      title: Experimental features
    - anchor: status-codes
      body: >-
        The Jira Cloud platform REST API uses the [standard HTTP status
        codes](https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).


        Operations that return an error status code may also return a response
        body containing details of the error or errors. 

        The schema for the response body is shown below:



        ```json

        {
          "id": "https://docs.atlassian.com/jira/REST/schema/error-collection#",
          "title": "Error Collection",
          "type": "object",
          "properties": {
            "errorMessages": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "errors": {
              "type": "object",
              "patternProperties": {
                ".+": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            },
            "status": { 
              "type": "integer"
            }
          },
          "additionalProperties": false
        }

        ```
      title: Status codes
